name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean

# 🛡️ Security: Restrict permissions to minimum required
permissions:
  contents: read
  checks: write
  pull-requests: write
  issues: write
  statuses: write

# 🚫 Cancel in-progress workflows for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  CACHE_VERSION: 'v1'

jobs:
  # 🔍 Pre-flight checks
  preflight:
    name: 🚀 Pre-flight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      node_version: ${{ steps.setup.outputs.node_version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Check if we should run
        id: check
        run: |
          echo "🔍 Evaluating CI run conditions..."
          echo "Event name: ${{ github.event_name }}"
          echo "PR draft status: ${{ github.event.pull_request.draft }}"
          
          # Default to running unless we have a specific reason not to
          SHOULD_RUN="true"
          
          # Check for draft PR
          if [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
            echo "📝 This is a draft PR"
            # Still run basic checks for draft PRs to provide feedback
            SHOULD_RUN="true"
            echo "✅ Running CI for draft PR (basic checks)"
          fi
          
          # Check for skip markers in commit message (be more flexible with the check)
          COMMIT_MSG="${{ github.event.head_commit.message || github.event.pull_request.title || '' }}"
          echo "Commit message: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" == *"[skip ci]"* ]] || [[ "$COMMIT_MSG" == *"[ci skip]"* ]] || [[ "$COMMIT_MSG" == *"[skip-ci]"* ]]; then
            echo "⏭️ CI skip requested in commit message"
            SHOULD_RUN="false"
          fi
          
          # Ensure we have valid values
          if [[ "$SHOULD_RUN" != "true" && "$SHOULD_RUN" != "false" ]]; then
            echo "⚠️ Invalid SHOULD_RUN value, defaulting to true"
            SHOULD_RUN="true"
          fi
          
          echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "Final decision: should_run=$SHOULD_RUN"
          
          if [ "$SHOULD_RUN" = "true" ]; then
            echo "✅ Proceeding with CI pipeline"
          else
            echo "🚫 Skipping CI pipeline based on conditions"
          fi

      - name: 🔧 Setup Node.js info
        id: setup
        run: |
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT

  # 🧪 Testing Matrix
  test:
    name: 🧪 Test Suite
    runs-on: ${{ matrix.os }}
    needs: preflight
    if: needs.preflight.result == 'success' && needs.preflight.outputs.should_run == 'true'
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20', '22']
        include:
          - os: ubuntu-latest
            node-version: '20'
            coverage: true
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm list --depth=0

      - name: 🔍 Run linting
        run: npm run lint

      - name: 🧪 Run tests
        run: |
          if [ "${{ matrix.coverage }}" = "true" ]; then
            npm run test:coverage
          else
            npm test
          fi
        shell: bash

      - name: 📊 Upload coverage to Codecov
        if: matrix.coverage && success()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📈 Upload coverage artifacts
        if: matrix.coverage && always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.os }}-node${{ matrix.node-version }}
          path: coverage/
          retention-days: 7

  # 🏗️ Build and Package
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [preflight, test]
    if: needs.preflight.result == 'success' && needs.preflight.outputs.should_run == 'true'
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build extension
        run: |
          echo "🔨 Building extension..."
          
          # Run the build process
          npm run build
          
          # Verify build output exists
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "❌ Build directory is missing or empty"
            ls -la dist/ || echo "dist directory doesn't exist"
            exit 1
          fi
          
          echo "✅ Build verification completed"
          echo "📦 Build contents:"
          ls -la dist/

      - name: 📦 Create extension package
        run: |
          echo "📦 Creating Chrome Store ready package..."
          npm run package:chrome-store
          
          echo "📦 Creating development package..."
          npm run package
          
          echo "📦 Packages created successfully!"
          ls -la packages/

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-packages-${{ github.sha }}
          path: |
            dist/
            packages/
          retention-days: 30

  # 🔒 Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.result == 'success' && needs.preflight.outputs.should_run == 'true'
    timeout-minutes: 10
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🛡️ Run npm audit
        run: |
          echo "🔍 Running npm security audit..."
          npm audit --audit-level moderate || true

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🔎 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # ✅ Quality Gates
  quality-gate:
    name: ✅ Quality Gate
    runs-on: ubuntu-latest
    needs: [preflight, test, build, security]
    if: always() && needs.preflight.result == 'success'
    timeout-minutes: 5
    
    steps:
      - name: 🏁 Check all jobs status
        run: |
          echo "🔍 Checking CI results..."
          
          # Initialize status counters
          CRITICAL_FAILURES=0
          WARNINGS=0
          
          # Check test results - allow for some tolerance
          if [ "${{ needs.test.result }}" = "failure" ]; then
            echo "❌ Tests failed"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          elif [ "${{ needs.test.result }}" = "skipped" ]; then
            echo "⚠️ Tests were skipped"
            WARNINGS=$((WARNINGS + 1))
          else
            echo "✅ Tests passed"
          fi
          
          # Check build results - this is critical
          if [ "${{ needs.build.result }}" = "failure" ]; then
            echo "❌ Build failed"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          elif [ "${{ needs.build.result }}" = "skipped" ]; then
            echo "⚠️ Build was skipped"
            WARNINGS=$((WARNINGS + 1))
          else
            echo "✅ Build passed"
          fi
          
          # Check security scan (allow skipped, warn on failure)
          if [ "${{ needs.security.result }}" = "failure" ]; then
            echo "⚠️ Security scan failed"
            WARNINGS=$((WARNINGS + 1))
          elif [ "${{ needs.security.result }}" = "skipped" ]; then
            echo "⏭️ Security scan was skipped"
          else
            echo "✅ Security scan passed"
          fi
          
          # Determine overall status
          echo ""
          echo "📊 Summary:"
          echo "  Critical failures: $CRITICAL_FAILURES"
          echo "  Warnings: $WARNINGS"
          
          if [ $CRITICAL_FAILURES -gt 0 ]; then
            echo "❌ Critical issues found - failing quality gate"
            exit 1
          elif [ $WARNINGS -gt 0 ]; then
            echo "⚠️ Some jobs had issues but proceeding"
            echo "🎯 Quality gate passed with warnings"
          else
            echo "🎉 All quality gates passed!"
          fi

      - name: 🎯 Set status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ CI Pipeline completed successfully!"
          else
            echo "❌ CI Pipeline failed. Please check the logs."
            exit 1
          fi

  # 📊 Report Results
  report:
    name: 📊 Generate Report
    runs-on: ubuntu-latest
    needs: [preflight, test, build, security, quality-gate]
    if: always() && github.event_name == 'pull_request' && needs.preflight.result == 'success'
    permissions:
      pull-requests: write
    
    steps:
      - name: 📝 Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const testStatus = '${{ needs.test.result }}';
            const buildStatus = '${{ needs.build.result }}';
            const securityStatus = '${{ needs.security.result }}';
            const qualityGateStatus = '${{ needs.quality-gate.result }}';
            
            const statusEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'skipped': return '⏭️';
                default: return '⚠️';
              }
            };
            
            const body = `## 🔄 CI/CD Pipeline Results
            
            | Job | Status | Result |
            |-----|--------|--------|
            | 🧪 Tests | ${statusEmoji(testStatus)} | ${testStatus} |
            | 🏗️ Build | ${statusEmoji(buildStatus)} | ${buildStatus} |
            | 🔒 Security | ${statusEmoji(securityStatus)} | ${securityStatus} |
            | ✅ Quality Gate | ${statusEmoji(qualityGateStatus)} | ${qualityGateStatus} |
            
            ${qualityGateStatus === 'success' ? '🎉 **All checks passed!** This PR is ready for review.' : '❌ **Some checks failed.** Please review the failed jobs above.'}
            
            ---
            *🤖 Automated report generated by CI/CD pipeline*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });